{"version":3,"sources":["features/SearchResultsTable/searchResultsSlice.js","features/CurrentMovieDisplay/CurrentMovieSlice.js","features/recommendationsSlice.js","features/helper.js","features/SearchResultsTable/SearchResultsTable.js","features/FilmFinder/FilmFinder.js","features/CurrentMovieDisplay/CurrentMovieDisplay.js","title.png","App.js","app/store.js","serviceWorker.js","index.js"],"names":["searchResultsSlice","createSlice","name","initialState","list","totalResults","reducers","setSearchResults","state","action","payload","clearSearchResults","addSearchResults","concat","setTotalResults","actions","selectSearchResults","searchResults","selectSearchTotal","currentMovieSlice","movieInfo","ratingInfo","extraInfo","recommendations","isDialogShown","setCurrentMovie","addRatingInfoToCurrentMovie","addExtraInfoToCurrentMovie","clearRecommendations","addRecommendations","push","openDialog","closeDialog","selectCurrentMovie","currentMovie","selectRatingInfo","selectExtraInfo","selectRecommendations","selectIsDialogShown","recommendationsSlice","allRecommendations","allRecommendationsJson","femaleDirected","femaleDirectedJson","femaleCastScores","femaleCastScoresJson","femaleCrewScores","femaleCrewScoresJson","femaleCastAndCrewScores","femaleCastAndCrewScoresJson","femaleCount","femaleCountJson","selectAllRecommendations","selectFemaleDirected","selectFemaleCastScores","selectFemaleCrewScores","selectFemaleCastAndCrewScores","selectFemaleCount","isFilmFemaleDirected","title","arr","filter","f","length","getFemaleScoreBadge","film","Badge","color","score","ratio_female","getFemaleScore","Math","round","SearchResultTable","dispatch","useDispatch","results","useSelector","all_recommendations","female_directed_movies","selectAMovie","movie","ms","getMovieInfo","Promise","resolve","setTimeout","then","fetch","imdbID","res","json","data","movieIds_recommended","slice","replace","trim","split","l","min","found_film","parseInt","i","movieId","total_film","Object","assign","image","Search","Poster","getMovieRecommendations","Title","className","Table","Head","height","TextHeaderCell","textProps","size","flex","textAlign","Body","map","Row","TextCell","Year","Cell","Button","onClick","e","iconBefore","AddIcon","appearance","FilmsFinder","useState","errorMessage","setErrorMessage","pageNumber","setPageNumber","searchValue","setSearchValue","updateSearchList","searchParams","TextInput","placeholder","onChange","target","value","onKeyPress","charCode","IconButton","icon","SearchIcon","Paragraph","ceil","CurrentMovieDisplay","current_recommendations","class","Heading","src","alt","directorList","a","writerList","starList","demographicFemales","allAges","rating","votes","demographicAll","App","isShown","Modal","show","fullscreen","onHide","Header","closeButton","configureStore","reducer","currentMovieReducer","searchResultsReducer","recommendationsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25a90ad6.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n/**\r\n * Redux slice for search results including name, initial state, reducers, actions, and selectors\r\n */\r\nexport const searchResultsSlice = createSlice({\r\n  name: 'Search Results',\r\n  initialState: {\r\n    list: [],\r\n    totalResults: 0\r\n  },\r\n  reducers: {\r\n    setSearchResults: (state, action) => {\r\n      state.list = action.payload;\r\n    },\r\n    clearSearchResults: (state) => {\r\n        state.list = []\r\n    }, \r\n    addSearchResults: (state, action) => {\r\n      state.list = state.list.concat(action.payload);\r\n    },\r\n    setTotalResults: (state, action) => {\r\n      state.totalResults = action.payload\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setSearchResults, clearSearchResults, addSearchResults, setTotalResults } = searchResultsSlice.actions;\r\n\r\nexport const selectSearchResults = state => state.searchResults.list;\r\n\r\nexport const selectSearchTotal = state => state.searchResults.totalResults;\r\n\r\nexport default searchResultsSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { loadCurrentMovie } from '../../app/localstorage';\r\n\r\n/**\r\n * Redux slice for Film list and showing Film list dialog box \r\n * including name, initial state, reducers, actions, and selectors\r\n */\r\nexport const currentMovieSlice = createSlice({\r\n  name: 'CurrentMovie',\r\n  initialState: {\r\n    movieInfo: {},\r\n    ratingInfo: {},\r\n    extraInfo: {},\r\n    recommendations: [],\r\n    isDialogShown: false\r\n  },\r\n  reducers: {\r\n    setCurrentMovie: (state, action) => {\r\n      state.movieInfo = action.payload;\r\n    },\r\n    addRatingInfoToCurrentMovie: (state, action) => {\r\n      state.ratingInfo = action.payload;\r\n    },\r\n    addExtraInfoToCurrentMovie: (state, action) => {\r\n      state.extraInfo = action.payload;\r\n    },\r\n    clearRecommendations: (state) => {\r\n      state.recommendations = []\r\n    },\r\n    addRecommendations: (state, action) => {\r\n      state.recommendations.push(action.payload)\r\n    },\r\n    openDialog: (state) => {\r\n      state.isDialogShown = true;\r\n    }, \r\n    closeDialog: (state) => {\r\n      state.isDialogShown = false\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setCurrentMovie, addRatingInfoToCurrentMovie, addExtraInfoToCurrentMovie, clearRecommendations, addRecommendations, openDialog, closeDialog } = currentMovieSlice.actions;\r\n\r\nexport const selectCurrentMovie = state => state.currentMovie.movieInfo;\r\n\r\nexport const selectRatingInfo = state => state.currentMovie.ratingInfo;\r\n\r\nexport const selectExtraInfo = state => state.currentMovie.extraInfo;\r\n\r\nexport const selectRecommendations = state => state.currentMovie.recommendations;\r\n\r\nexport const selectIsDialogShown = state => state.currentMovie.isDialogShown\r\n\r\nexport default currentMovieSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport allRecommendationsJson from '../json/all_recommendations.json'\r\nimport femaleDirectedJson from '../json/female_directed_movies.json'\r\nimport femaleCastScoresJson from '../json/scored_movies_cast.json'\r\nimport femaleCountJson from '../json/counted_movies_cast_and_crew.json'\r\nimport femaleCrewScoresJson from '../json/scored_movies_crew.json'\r\nimport femaleCastAndCrewScoresJson from '../json/scored_movies_cast_and_crew.json'\r\n\r\n/**\r\n * Redux slice for Film list and showing Film list dialog box \r\n * including name, initial state, reducers, actions, and selectors\r\n */\r\nexport const recommendationsSlice = createSlice({\r\n  name: 'Recommendations',\r\n  initialState: {\r\n    allRecommendations: allRecommendationsJson,\r\n    femaleDirected: femaleDirectedJson,\r\n    femaleCastScores: femaleCastScoresJson,\r\n    femaleCrewScores: femaleCrewScoresJson,\r\n    femaleCastAndCrewScores: femaleCastAndCrewScoresJson,\r\n    femaleCount: femaleCountJson\r\n  },\r\n  reducers: {\r\n\r\n  },\r\n});\r\n\r\n// export const { setCurrentMovie, addRatingInfoToCurrentMovie, addExtraInfoToCurrentMovie, openDialog, closeDialog } = currentMovieSlice.actions;\r\n\r\nexport const selectAllRecommendations = state => state.recommendations.allRecommendations;\r\n\r\nexport const selectFemaleDirected = state => state.recommendations.femaleDirected\r\n\r\nexport const selectFemaleCastScores = state => state.recommendations.femaleCastScores\r\n\r\nexport const selectFemaleCrewScores = state => state.recommendations.femaleCrewScores\r\n\r\nexport const selectFemaleCastAndCrewScores = state => state.recommendations.femaleCastAndCrewScores\r\n\r\nexport const selectFemaleCount = state => state.recommendations.femaleCount\r\n\r\nexport default recommendationsSlice.reducer;\r\n","import { Badge, Paragraph } from 'evergreen-ui'\r\n\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n\r\nexport const isFilmFemaleDirected = (title, arr) => {\r\n    \r\n    const film = arr.filter(f => f.title === title)\r\n    if (film.length > 0){\r\n        return true\r\n    }\r\n    return false\r\n    \r\n}\r\n\r\nexport const getFemaleScoreBadge = (title, arr) => {\r\n    \r\n    const film = arr.filter(f => f.title === title)\r\n    if (film.length === 0){\r\n        return <Badge color={\"neutral\"}>Data Unavailable</Badge>\r\n    }\r\n\r\n    const score = film[0].ratio_female *100\r\n\r\n    if (score >= 40) {\r\n        return <Badge color={\"green\"}>{\">\"} 40% Female Involvement</Badge>\r\n    }\r\n    if (score >= 30) {\r\n        return <Badge color={\"yellow\"}>{\">\"} 30% Female Involvement</Badge>\r\n    }\r\n    if (score >= 20) {\r\n        return <Badge color={\"yellow\"}>{\">\"} 50% Female Involvement</Badge>\r\n    }\r\n    return <Badge color={\"red\"}>{\"<\"} 20% Female Involvement</Badge>\r\n    \r\n}\r\n\r\nexport const getFemaleScore = (title, arr) => {\r\n    \r\n    const film = arr.filter(f => f.title === title)\r\n    if (film.length === 0){\r\n        return \"Data Unavailable\"\r\n    }\r\n\r\n    const score = Math.round(film[0].ratio_female *100*100)/100\r\n\r\n    return `${score}%`\r\n    \r\n}\r\n","import React from 'react'\r\nimport { AddIcon, Badge, Button, SelectedPropType, Table } from 'evergreen-ui'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectSearchResults } from \"./searchResultsSlice\";\r\nimport { openDialog, selectCurrentMovie, setCurrentMovie, addRatingInfoToCurrentMovie, addExtraInfoToCurrentMovie, addRecommendations, clearRecommendations } from '../CurrentMovieDisplay/CurrentMovieSlice';\r\nimport \"./SearchResultsTable.css\"\r\nimport { selectAllRecommendations, selectFemaleDirected } from '../recommendationsSlice';\r\nimport { isFilmFemaleDirected } from '../helper';\r\n\r\nconst SearchResultTable = () => {\r\n    // dispatch to store\r\n    const dispatch = useDispatch()\r\n\r\n    // selecting from store\r\n    const results = useSelector(selectSearchResults)\r\n    const all_recommendations = useSelector(selectAllRecommendations)\r\n    const female_directed_movies = useSelector(selectFemaleDirected)\r\n      \r\n    function sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n    \r\n    /**\r\n     * Add a movie to the list of Films\r\n     * @param {Object} movie \r\n     */\r\n    const selectAMovie = (movie) => {\r\n        dispatch(setCurrentMovie(movie))\r\n        getMovieInfo(movie)\r\n        sleep(1000).then(() => { dispatch(openDialog()) });\r\n        \r\n    }\r\n\r\n    const getMovieRecommendations = (title, all_recommendations) => {\r\n        \r\n        dispatch(clearRecommendations())\r\n\r\n        const film = all_recommendations.filter(f => f.title === title)\r\n\r\n        if (film.length === 0){\r\n            return []\r\n        }\r\n\r\n        const recommendations = film[0].movieIds_recommended.slice(1,-1).replace(/\\s+/g, ' ').trim().split(\" \")\r\n\r\n        const l = Math.min(recommendations.length, 5)\r\n    \r\n        var new_recommendations = []\r\n\r\n        for (var i=0; i < l; i++){\r\n            const found_film = all_recommendations.filter(f => parseInt(recommendations[i]) === f.movieId)[0]\r\n\r\n            fetch(`https://www.omdbapi.com/?apikey=793ba15b&type=movie&s=${found_film.title}`)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                \r\n                var total_film = Object.assign({}, found_film, {image: data.Search[0].Poster})\r\n                dispatch(addRecommendations(total_film))\r\n            })\r\n        }\r\n    }\r\n\r\n    const getMovieInfo = (movie) => {\r\n\r\n        fetch(`https://imdb-api.com/en/API/UserRatings/k_1m0l7cx2/${movie.imdbID}`)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n    \r\n            dispatch(addRatingInfoToCurrentMovie(data))\r\n        \r\n        })\r\n\r\n        fetch(`https://imdb-api.com/en/API/Title/k_1m0l7cx2/${movie.imdbID}/FullActor,Ratings,`)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n    \r\n            dispatch(addExtraInfoToCurrentMovie(data))\r\n        \r\n        })\r\n\r\n\r\n        getMovieRecommendations(movie.Title, all_recommendations)\r\n        \r\n    }\r\n\r\n    return (\r\n        results && results.length\r\n        ? <div className=\"SearchResultTable\">\r\n            <Table className=\"SearchResultTable_table\">\r\n                <Table.Head height={45} className=\"search_result_table_header\">\r\n                    <Table.TextHeaderCell textProps={{size: 400}} flex=\"30%\">\r\n                    Movie Title\r\n                    </Table.TextHeaderCell>\r\n                    <Table.TextHeaderCell textProps={{size: 400, textAlign:'center'}} flex=\"25%\">\r\n                    Year of Release\r\n                    </Table.TextHeaderCell>\r\n                    <Table.TextHeaderCell flex=\"25%\">\r\n                    </Table.TextHeaderCell>\r\n                    <Table.TextHeaderCell flex=\"20%\"/>\r\n                </Table.Head>\r\n                <Table.Body textProps={{size: 400}}>\r\n                    {results.map(movie => (\r\n                    <Table.Row height={45} className=\"search_result_table_row\" key={movie.imdbID}>\r\n                        <Table.TextCell textProps={{size: 400}} flex=\"30%\">{movie.Title}</Table.TextCell>\r\n                        <Table.TextCell textProps={{size: 400, textAlign:'center'}} flex=\"25%\">{movie.Year}</Table.TextCell>\r\n                        <Table.Cell flex=\"20%\">{isFilmFemaleDirected(movie.Title, female_directed_movies) ? <Badge color={\"purple\"}>Female Directed</Badge> : <div></div>}</Table.Cell>\r\n                        <Table.Cell flex=\"25%\">\r\n                            <Button \r\n                            className=\"add_button\" \r\n                            onClick={(e) => selectAMovie(movie)} \r\n                            iconBefore={AddIcon} \r\n                            height={24} \r\n                            appearance='minimal' \r\n                            >Show Details</Button>\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                    ))}\r\n                </Table.Body>\r\n            </Table>\r\n        </div>\r\n        : <div></div>\r\n    )\r\n}\r\n\r\nexport default SearchResultTable","import React from 'react'\r\nimport { useState} from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { IconButton, Paragraph, SearchIcon, TextInput } from 'evergreen-ui';\r\nimport { clearSearchResults, addSearchResults, setTotalResults, selectSearchTotal, setSearchResults } from \"../SearchResultsTable/searchResultsSlice\"\r\nimport SearchResultTable from '../SearchResultsTable/SearchResultsTable';\r\nimport './FilmFinder.css'\r\n\r\n/**\r\n * FilmsFinder contains search bar and results table to find Films\r\n */\r\nconst FilmsFinder = () => {\r\n    // selecting data from the store\r\n    const totalResults = useSelector(selectSearchTotal)\r\n\r\n    // dispatch to store\r\n    const dispatch = useDispatch()\r\n\r\n    // local state values\r\n    const [errorMessage, setErrorMessage] = useState(\"Please enter at least 3 characters to begin searching.\")\r\n    const [pageNumber, setPageNumber] = useState(1)\r\n    const [searchValue, setSearchValue] = useState(\"\")\r\n\r\n    /**\r\n     * Updates the search results in the store\r\n     * @param {String} searchParams value to search for in OMDB\r\n     */\r\n    const updateSearchList = (searchParams) => {\r\n\r\n        fetch(`https://www.omdbapi.com/?apikey=793ba15b&type=movie&s=${searchParams}`)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n\r\n            setPageNumber(1)\r\n\r\n            if (!data.Search){\r\n                setErrorMessage(\"No Results Found.\")\r\n                dispatch(clearSearchResults())\r\n            }\r\n            else {\r\n                setErrorMessage(\"\")\r\n                dispatch(setSearchResults(data.Search))\r\n                dispatch(setTotalResults(data.totalResults))\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Loads the next page of search results\r\n     */\r\n    const loadNextPage = () => {\r\n        fetch(`https://www.omdbapi.com/?apikey=793ba15b&type=movie&s=${searchValue}&page=${pageNumber + 1}`)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            setErrorMessage(\"\")\r\n            dispatch(addSearchResults(data.Search))\r\n            dispatch(setTotalResults(data.totalResults))\r\n            setPageNumber(pageNumber + 1)\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div className=\"FilmFinder\">\r\n            <div className=\"FilmFinder_search_wrapper\">\r\n                <TextInput \r\n                className=\"FilmFinder_search\"\r\n                placeholder=\"Search for a movie...\"\r\n                onChange = {e => {\r\n                    setSearchValue(e.target.value)\r\n                }}\r\n                onKeyPress = {e => {\r\n                    if (e.charCode === 13) {\r\n                        if (searchValue.length < 3) {\r\n                            setErrorMessage(\"Please enter at least 3 characters to begin searching.\")\r\n                        }\r\n                        else {\r\n                            updateSearchList(searchValue) \r\n                        }\r\n                    }\r\n                }}\r\n                />\r\n                <div className=\"FilmFinder_search_button_wrapper\">\r\n                    <IconButton \r\n                    className=\"FilmFinder_search_button\" \r\n                    appearance='minimal' \r\n                    icon={SearchIcon} \r\n                    height={28}\r\n                    onClick={() => updateSearchList(searchValue) }\r\n                    />\r\n                </div>\r\n            </div>\r\n            <Paragraph className=\"FilmFinder_error\">{errorMessage}</Paragraph>\r\n            <SearchResultTable /> \r\n            {\r\n            // load more button should ony be shown when there are more results to display\r\n            pageNumber < Math.ceil(totalResults/10) && !errorMessage.length\r\n            ? <div className=\"FilmFinder_load_button_wrapper\">\r\n            <button \r\n            className=\"FilmFinder_load_button\"\r\n            onClick={loadNextPage}\r\n            > <Paragraph className=\"FilmFinder_load_button_text\" size={400} >Load More </Paragraph>\r\n            </button>\r\n            </div>\r\n            : <div/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default FilmsFinder","import { Heading, Paragraph, Badge } from 'evergreen-ui'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectCurrentMovie, selectRatingInfo, selectExtraInfo, setRecommendations, selectRecommendations } from '../CurrentMovieDisplay/CurrentMovieSlice'\r\nimport { getRecommendations, isFilmFemaleDirected, getFemaleScoreBadge, getFemaleScore } from '../helper'\r\nimport { selectAllRecommendations, selectFemaleCastScores, selectFemaleCount, selectFemaleCrewScores, selectFemaleDirected } from '../recommendationsSlice'\r\nimport { selectFemaleCastAndCrewScores } from '../recommendationsSlice'\r\nimport './CurrentMovieDisplay.css'\r\n\r\nconst CurrentMovieDisplay = () => {\r\n    // selecting data from the store\r\n    const currentMovie = useSelector(selectCurrentMovie)\r\n    const ratingInfo = useSelector(selectRatingInfo)\r\n    const extraInfo = useSelector(selectExtraInfo)\r\n    const female_directed_movies = useSelector(selectFemaleDirected)\r\n    const femaleCastAndCrewScores = useSelector(selectFemaleCastAndCrewScores)\r\n    const femaleCastScores = useSelector(selectFemaleCastScores)\r\n    const femaleCrewScores = useSelector(selectFemaleCrewScores)\r\n    const femaleCount = useSelector(selectFemaleCount)\r\n \r\n    const current_recommendations = useSelector(selectRecommendations)\r\n\r\n    // dispatch to the store\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    return (\r\n        <div className=\"currentMovieDisplay\">\r\n            <div class=\"grid_layout\">\r\n                <div className=\"movie_title\">\r\n                    <Heading size={900}>{currentMovie.Title}</Heading>\r\n                </div>\r\n                <img className=\"movie_poster\" src={currentMovie.Poster} alt={'Movie Poster'}></img>\r\n                <div className=\"cast-info\">\r\n                    <Heading size={600}>Cast Information:</Heading>\r\n                    <ul></ul>\r\n                    <Heading size={400}>Directors:</Heading>\r\n                    <ul>\r\n                        {extraInfo.directorList.map((a) => <li>{a.name}</li>)}\r\n                    </ul>\r\n                    <Heading size={400}>Writers:</Heading>\r\n                    <ul>\r\n                        {extraInfo.writerList.map((a) => <li>{a.name}</li>)}\r\n                    </ul>\r\n                    <Heading size={400}>Starring:</Heading>\r\n                    <ul>\r\n                        {extraInfo.starList.map((a) => <li>{a.name}</li>)}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"user_ratings\">\r\n                    <Heading size={700}>Female audience score: </Heading>\r\n                    <Heading size={800}>{ratingInfo.demographicFemales.allAges.rating}</Heading>\r\n                    <Heading size={500}>({ratingInfo.demographicFemales.allAges.votes} responses)</Heading>\r\n                    <br></br>\r\n                    <Heading size={700}>General audience score: </Heading>\r\n                    <Heading size={800}>{ratingInfo.demographicAll.allAges.rating}</Heading>\r\n                    <Heading size={500}>({ratingInfo.demographicAll.allAges.votes} responses)</Heading>\r\n                    <br></br>\r\n                    <Heading size={700}>Percentage of reviews made by women: </Heading>\r\n                    <Heading size={800}>{Math.round(ratingInfo.demographicFemales.allAges.votes/ratingInfo.demographicAll.allAges.votes * 100 * 100) / 100 }%</Heading>\r\n                </div>\r\n                <div className=\"our_data\">\r\n                    <Heading size={600}>Percentage of Female Cast Members:</Heading>\r\n                    <Heading size={700}>{getFemaleScore(currentMovie.Title, femaleCastScores)}</Heading>\r\n                    <br></br>\r\n                    <Heading size={600}>Percentage of Female Crew Members:</Heading>\r\n                    <Heading size={700}>{getFemaleScore(currentMovie.Title, femaleCrewScores)}</Heading>\r\n                    <br></br>\r\n                    <Heading size={600}>Number of Women Involved in the Film:</Heading>\r\n                    <Heading size={700}>{getFemaleScore(currentMovie.Title, femaleCount).slice(0,-1)}</Heading>\r\n                </div>\r\n                <div className=\"imdb-rec\">\r\n                    <Heading size={700}>Recommended</Heading>\r\n                    {current_recommendations.map((a) => \r\n                        <div className=\"recommendation\">\r\n                            <img className=\"mini-image\" src={a.image} alt={`${a.title} Movie Poster`}></img>\r\n                            <div className='mini-title'>\r\n                                <Paragraph size={500}>{a.title}</Paragraph>\r\n                                {isFilmFemaleDirected(a.title, female_directed_movies) ? <Badge color={\"purple\"}>Female Directed</Badge> : <div></div>}\r\n                                {getFemaleScoreBadge(a.title, femaleCastAndCrewScores)}\r\n                            </div>\r\n                        </div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentMovieDisplay ","export default __webpack_public_path__ + \"static/media/title.795a8174.png\";","import { Heading} from 'evergreen-ui';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from 'react-bootstrap'\r\nimport './App.css';\r\nimport FilmFinder from './features/FilmFinder/FilmFinder';\r\nimport { selectCurrentMovie } from './features/CurrentMovieDisplay/CurrentMovieSlice';\r\nimport CurrentMovieDisplay from './features/CurrentMovieDisplay/CurrentMovieDisplay.js'\r\nimport { closeDialog, selectIsDialogShown } from './features/CurrentMovieDisplay/CurrentMovieSlice';\r\nimport title from './title.png'\r\n\r\nfunction App() {\r\n  // dispatch to store\r\n  const dispatch = useDispatch()\r\n\r\n  // selecting data from store\r\n  const isShown = useSelector(selectIsDialogShown)\r\n  const currentMovie = useSelector(selectCurrentMovie)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <Modal show={isShown} fullscreen={true} onHide={() => dispatch(closeDialog())}>\r\n    {/* <Modal.Title><Heading size={900}>{currentMovie.Title}</Heading></Modal.Title> */}\r\n        <Modal.Header closeButton>\r\n        </Modal.Header>\r\n        <Modal.Body><CurrentMovieDisplay/></Modal.Body>\r\n      </Modal>\r\n      <img className=\"App_heading\" src={title} alt=\"Female-Driven films\"></img>\r\n      <div className=\"App_review_button_wrapper\">\r\n      </div>\r\n      <FilmFinder />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport currentMovieReducer from '../features/CurrentMovieDisplay/CurrentMovieSlice'\r\nimport recommendationsReducer from '../features/recommendationsSlice';\r\nimport searchResultsReducer from '../features/SearchResultsTable/searchResultsSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    currentMovie: currentMovieReducer, \r\n    searchResults: searchResultsReducer,\r\n    recommendations: recommendationsReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}